# pyright: basic
"""
This file is automatically generated.
Do not edit this file directly.
"""

from dataclasses import dataclass

from volt.components import Component

from custom_types import (
    BaseNavbarTypes,
    DemoProgrammingLanguageListTypes,
    DemoTaskListTypes,
    DemoCounterTypes,
    DemoChatMessagesTypes,
    DemoContentTypes,
)


class BaseNavbar(Component):

    template_name: str = "base.html"
    block_name: str = "navbar"

    @dataclass
    class Context(Component.Context):
        selected: BaseNavbarTypes.selected
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class BaseContent(Component):

    template_name: str = "base.html"
    block_name: str = "content"

    @dataclass
    class Context(Component.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class Base(
    BaseNavbar,
    BaseContent,
    
):
    template_name: str = "base.html"
    block_name: str = "content"

    @dataclass
    class Context(
        BaseNavbar.Context,
        BaseContent.Context,
        
    ):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class DemoProgrammingLanguageList(Component):

    template_name: str = "demo.html"
    block_name: str = "programming_language_list"

    @dataclass
    class Context(Component.Context):
        searching: DemoProgrammingLanguageListTypes.searching
        programming_languages: DemoProgrammingLanguageListTypes.programming_languages
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class DemoTaskList(Component):

    template_name: str = "demo.html"
    block_name: str = "task_list"

    @dataclass
    class Context(Component.Context):
        tasks: DemoTaskListTypes.tasks
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class DemoCounter(Component):

    template_name: str = "demo.html"
    block_name: str = "counter"

    @dataclass
    class Context(Component.Context):
        value: DemoCounterTypes.value
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class DemoChatMessages(Component):

    template_name: str = "demo.html"
    block_name: str = "chat_messages"

    @dataclass
    class Context(Component.Context):
        chat_messages: DemoChatMessagesTypes.chat_messages
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class DemoContent(
    DemoProgrammingLanguageList,
    DemoTaskList,
    DemoCounter,
    DemoChatMessages,
    Base,
    
):
    template_name: str = "demo.html"
    block_name: str = "content"

    @dataclass
    class Context(
        DemoProgrammingLanguageList.Context,
        DemoTaskList.Context,
        DemoCounter.Context,
        DemoChatMessages.Context,
        Base.Context,
        
    ):
        searching: DemoContentTypes.searching
        programming_languages: DemoContentTypes.programming_languages
        tasks: DemoContentTypes.tasks
        value: DemoContentTypes.value
        chat_messages: DemoContentTypes.chat_messages
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class Demo(DemoContent):

    template_name: str = "demo.html"
    block_name: str = "content"

    @dataclass
    class Context(DemoContent.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class FeaturesContent(Base):

    template_name: str = "features.html"
    block_name: str = "content"

    @dataclass
    class Context(Base.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class Features(FeaturesContent):

    template_name: str = "features.html"
    block_name: str = "content"

    @dataclass
    class Context(FeaturesContent.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class HomeContent(Base):

    template_name: str = "home.html"
    block_name: str = "content"

    @dataclass
    class Context(Base.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)


class Home(HomeContent):

    template_name: str = "home.html"
    block_name: str = "content"

    @dataclass
    class Context(HomeContent.Context):
        ...
        
    def __init__(self, context: Context) -> None:
        super().__init__(context)

